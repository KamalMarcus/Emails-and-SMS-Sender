/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EmailsSMS;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import AESenc.AESenc;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;

/**
 *
 * @author Gamer
 */
public class SettingsDialog extends javax.swing.JDialog {

  int SMTPorSendlySMS = 0;
  JLabel labelKey = new JLabel("Key :");
  JLabel labelSecret = new JLabel("Secret :");
  public static JTextField textKey = new JTextField();
  public static JPasswordField textSecret = new JPasswordField();
  public static JButton buttonCredit=new JButton("Credits");
  JPanel smsPanel=new JPanel();
  JPanel generalPanel=new JPanel();
  
  
  
  JCheckBox checkEnablingBirthdayNotification=new JCheckBox("Enabling Birthdays Notification");
  JLabel labelChangePassword=new JLabel("<HTML><U>Change Login Password</U></HTML>");
  
  

  /**
   * Creates new form SettingsDialog
   */
  public SettingsDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    setTitle("Settings");
    setResizable(false);
    labelKey.setSize(labelHost.getSize());
    labelKey.setLocation(labelHost.getLocation());
    textKey.setSize(textHost.getSize());
    textKey.setLocation(textHost.getLocation());
    labelSecret.setSize(labelSTARTTLS.getSize());
    labelSecret.setLocation(labelPort.getLocation());
    textSecret.setSize(textKey.getSize());
    textSecret.setLocation(textPort.getLocation());
    buttonCredit.setSize(textHost.getSize());
    buttonCredit.setLocation(checkAuthentication.getLocation());


    smsPanel.setLayout(null);
    smsPanel.add(labelKey);
    smsPanel.add(textKey);
    smsPanel.add(labelSecret);
    smsPanel.add(textSecret);
    smsPanel.add(buttonCredit);
    
   checkEnablingBirthdayNotification.setSelected(true);
   checkEnablingBirthdayNotification.setSize(textHost.getSize());
   checkEnablingBirthdayNotification.setLocation(labelHost.getLocation());
   
   labelChangePassword.setLocation(labelPort.getLocation());
   labelChangePassword.setSize(150,15);
   labelChangePassword.addMouseListener(new MouseListener() {

      @Override
      public void mouseClicked(MouseEvent me) {
       new changingPasswordDialog(null, true).setVisible(true);
      }

      @Override
      public void mousePressed(MouseEvent me) {
        
      }

      @Override
      public void mouseReleased(MouseEvent me) {
        
      }

      @Override
      public void mouseEntered(MouseEvent me) {
        labelChangePassword.setForeground(Color.blue);
        labelChangePassword.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      }

      @Override
      public void mouseExited(MouseEvent me) {
        labelChangePassword.setForeground(Color.black);
      }
    });
   
   generalPanel.setLayout(null);
   generalPanel.add(checkEnablingBirthdayNotification);
   generalPanel.add(labelChangePassword);
   
   
    
//     labelKey.setLocation(labelPort.getLocation());
//        buttonCredit.setLocation(checkSTATTLS.getLocation());
    tapSMTP.addTab("SMS (SendlySMS)", smsPanel);
    tapSMTP.addTab("General", generalPanel);
    buttonCredit.addActionListener(new ActionListener() {

      @Override
      public void actionPerformed(ActionEvent ae) {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
         getCredit();
         setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    });
    LoadSettings();
    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    jTextField2 = new javax.swing.JTextField();
    tapSMTP = new javax.swing.JTabbedPane();
    jPanel1 = new javax.swing.JPanel();
    labelHost = new javax.swing.JLabel();
    labelPort = new javax.swing.JLabel();
    labelAuthentication = new javax.swing.JLabel();
    labelSTARTTLS = new javax.swing.JLabel();
    labelUser = new javax.swing.JLabel();
    labelPassword = new javax.swing.JLabel();
    textHost = new javax.swing.JTextField();
    textPort = new javax.swing.JTextField();
    textUser = new javax.swing.JTextField();
    checkAuthentication = new javax.swing.JCheckBox();
    checkSTATTLS = new javax.swing.JCheckBox();
    textPassword = new javax.swing.JPasswordField();
    buttonSetToDefaults = new javax.swing.JButton();
    buttonSaveSettings = new javax.swing.JButton();
    buttonCancel = new javax.swing.JButton();

    jTextField2.setText("jTextField2");

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    labelHost.setText("Host :");

    labelPort.setText("Port :");

    labelAuthentication.setText("Authentication :");

    labelSTARTTLS.setText("STARTTLS :");

    labelUser.setText("User :");

    labelPassword.setText("Password :");

    checkAuthentication.setText("True");

    checkSTATTLS.setText("True");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(19, 19, 19)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(labelHost)
          .addComponent(labelPassword)
          .addComponent(labelUser)
          .addComponent(labelSTARTTLS)
          .addComponent(labelAuthentication)
          .addComponent(labelPort))
        .addGap(40, 40, 40)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(textHost)
          .addComponent(textPort)
          .addComponent(textUser)
          .addComponent(checkAuthentication)
          .addComponent(checkSTATTLS)
          .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(19, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelHost)
          .addComponent(textHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(textPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(labelPort))
        .addGap(20, 20, 20)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelAuthentication)
          .addComponent(checkAuthentication))
        .addGap(20, 20, 20)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelSTARTTLS)
          .addComponent(checkSTATTLS))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(labelUser)
          .addComponent(textUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(21, 21, 21)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelPassword)
          .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(69, 69, 69))
    );

    tapSMTP.addTab("Mail (SMTP)", jPanel1);

    buttonSetToDefaults.setText("Reset");
    buttonSetToDefaults.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSetToDefaultsActionPerformed(evt);
      }
    });

    buttonSaveSettings.setText("Save");
    buttonSaveSettings.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSaveSettingsActionPerformed(evt);
      }
    });

    buttonCancel.setText("Cancel");
    buttonCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonCancelActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(tapSMTP, javax.swing.GroupLayout.Alignment.TRAILING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(buttonCancel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonSetToDefaults)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonSaveSettings)
        .addGap(20, 20, 20))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(tapSMTP, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(7, 7, 7)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(buttonSaveSettings)
          .addComponent(buttonSetToDefaults)
          .addComponent(buttonCancel))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    tapSMTP.getAccessibleContext().setAccessibleName("Mail (SMTP)");

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    dispose();
  }//GEN-LAST:event_buttonCancelActionPerformed

  private void buttonSetToDefaultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetToDefaultsActionPerformed
    onSetToDefault();
  }//GEN-LAST:event_buttonSetToDefaultsActionPerformed

  private void buttonSaveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveSettingsActionPerformed
    if (textHost.getText().isEmpty()) {
      JOptionPane.showMessageDialog(this, "Please enter the Host domain !");
    } else if (textPort.getText().isEmpty()) {
      JOptionPane.showMessageDialog(this, "Please enter the Port number !");
    } else if (!textUser.getText().matches("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
      JOptionPane.showMessageDialog(this, "Please enter a valid user name !");
    } else if (String.valueOf(textPassword.getPassword()).isEmpty()) {
      JOptionPane.showMessageDialog(this, "Please enter the password of your username");
    } else if (textKey.getText().isEmpty()) {
      JOptionPane.showMessageDialog(this, "Please enter the key of the API");
    } else if (String.valueOf(textSecret.getPassword()).isEmpty()) {
      JOptionPane.showMessageDialog(this, "Please enter the secret of the API !");
    } else {
      onEditingSMTP();
      onEditingSendlySMS();
      try {
        PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("UPDATE Settings SET host=?,port=?,authentication=?,STATTLS=?,user=?,password=?,key=?,secret=? ,enableBirthday=?");
        ps.setString(1, AESenc.encrypt(textHost.getText()));
        ps.setString(2, AESenc.encrypt(textPort.getText()));
        ps.setString(3, AESenc.encrypt("" + checkAuthentication.isSelected()));
        ps.setString(4, AESenc.encrypt("" + checkSTATTLS.isSelected()));
        ps.setString(5, AESenc.encrypt(textUser.getText()));
        ps.setString(6, AESenc.encrypt(String.valueOf(textPassword.getPassword())));
        ps.setString(7, AESenc.encrypt(textKey.getText()));
        ps.setString(8, AESenc.encrypt(String.valueOf(textSecret.getPassword())));
        ps.setString(9, ""+checkEnablingBirthdayNotification.isSelected());

        ps.executeUpdate();
      } catch (Exception e) {
        e.printStackTrace();
      }
      dispose();
    }
  }//GEN-LAST:event_buttonSaveSettingsActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        SettingsDialog dialog = new SettingsDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonCancel;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JButton buttonSaveSettings;
  private javax.swing.JButton buttonSetToDefaults;
  public static javax.swing.JCheckBox checkAuthentication;
  public static javax.swing.JCheckBox checkSTATTLS;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JTextField jTextField2;
  private javax.swing.JLabel labelAuthentication;
  private javax.swing.JLabel labelHost;
  private javax.swing.JLabel labelPassword;
  private javax.swing.JLabel labelPort;
  private javax.swing.JLabel labelSTARTTLS;
  private javax.swing.JLabel labelUser;
  private javax.swing.JTabbedPane tapSMTP;
  public static javax.swing.JTextField textHost;
  public static javax.swing.JPasswordField textPassword;
  public static javax.swing.JTextField textPort;
  public static javax.swing.JTextField textUser;
  // End of variables declaration//GEN-END:variables

  private void onEditingSMTP() {
    MainFrame.host = textHost.getText();
    MainFrame.port = textPort.getText();
    if (checkAuthentication.isSelected()) {
      MainFrame.authentication = true;
    } else if (!checkAuthentication.isSelected()) {
      MainFrame.authentication = false;
    }
    if (checkSTATTLS.isSelected()) {
      MainFrame.startTls = true;
    } else if (!checkSTATTLS.isSelected()) {
      MainFrame.startTls = false;
    }
    MainFrame.fromEmail = textUser.getText();
    MainFrame.password = String.valueOf(textPassword.getPassword());
  }

  private void onEditingSendlySMS() {
    MainFrame.Key = textKey.getText();
    MainFrame.Secret = String.valueOf(textSecret.getPassword());
  }

  private void onSetToDefault() {
    textHost.setText("smtp.mandrillapp.com");
    textPort.setText("587");
    checkAuthentication.setSelected(true);
    checkSTATTLS.setSelected(true);
    textUser.setText("n.molham@gmail.com");
    textPassword.setText("brq6IF7s5DrIHtXRijMuHA");

    textKey.setText("02ca10ac-82b7-4a1a-9788-3cfd12");
    textSecret.setText("61f5b41b-e69c-4067-b3bd-a4a2c9956bf4");
    
    checkEnablingBirthdayNotification.setSelected(true);
  }

  private void LoadSettings() {
    try {
      PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("select * from Settings");
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        textHost.setText(AESenc.decrypt(rs.getString("host")));
        textPort.setText(AESenc.decrypt(rs.getString("port")));
        if (AESenc.decrypt(rs.getString("authentication")).equals("true")) {
          checkAuthentication.setSelected(true);
        } else if (AESenc.decrypt(rs.getString("authentication")).equals("false")) {
          checkAuthentication.setSelected(false);
        }
        if (AESenc.decrypt(rs.getString("STATTLS")).equals("true")) {
          checkSTATTLS.setSelected(true);
        } else if (AESenc.decrypt(rs.getString("STATTLS")).equals("false")) {
          checkSTATTLS.setSelected(false);
        }
        textUser.setText(AESenc.decrypt(rs.getString("user")));
        textPassword.setText(AESenc.decrypt(rs.getString("password")));

        textKey.setText(AESenc.decrypt(rs.getString("key")));
        textSecret.setText(AESenc.decrypt(rs.getString("secret")));
        MainFrame.Key=AESenc.decrypt(rs.getString("key"));
        MainFrame.Secret=AESenc.decrypt(rs.getString("secret"));
        
        if(rs.getString("enableBirthday").equals("true")){
          checkEnablingBirthdayNotification.setSelected(true);
        }
        else if(!rs.getString("enableBirthday").equals("true")){
          checkEnablingBirthdayNotification.setSelected(false);
        }
        
      }
      
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
  public void getCredit(){
    try {
      URL urldemo = new URL("http://apis.sendlysms.com/?api=getcredit&key="+textKey.getText()+"&secret="+String.valueOf(textSecret.getPassword()));
      URLConnection yc = urldemo.openConnection();
      BufferedReader in = new BufferedReader(new InputStreamReader(
              yc.getInputStream()));
      String inputLine;
      inputLine = in.readLine();
      System.out.println(MainFrame.Key);
      System.out.println(MainFrame.Secret);
        System.out.println(inputLine);
        JOptionPane.showMessageDialog(buttonCredit, inputLine);
      
      in.close();
    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Error ! Check your Internet Connection !");
     System.out.println(e);
    }
  }
}
