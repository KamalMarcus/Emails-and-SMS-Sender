/*
 * The MIT License
 *
 * Copyright 2015 Gamer.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package EmailsSMS;

import AESenc.AESenc;
import com.sun.glass.events.KeyEvent;
import java.awt.ComponentOrientation;
import java.awt.im.InputContext;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Scanner;
import javax.swing.JOptionPane;
import static EmailsSMS.EmailsAndSMSSender.noPassword;

/**
 *
 * @author Gamer
 */
public class changingPasswordDialog extends javax.swing.JDialog {

  /**
   * Creates new form changingPasswordDialog
   */
  public changingPasswordDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    if(noPassword){
      textCurrentPassword.setVisible(false);
      labelCurrentPassword.setVisible(false);
    }
    setLocationRelativeTo(null);
    setTitle("Change Password");
    setResizable(false);
    pack();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonCancel = new javax.swing.JButton();
    buttonChangePassword = new javax.swing.JButton();
    textCurrentPassword = new javax.swing.JPasswordField();
    textNewPassword = new javax.swing.JPasswordField();
    textConfirmPassword = new javax.swing.JPasswordField();
    labelCurrentPassword = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    buttonCancel.setText("Cancel");
    buttonCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonCancelActionPerformed(evt);
      }
    });

    buttonChangePassword.setText("Change Password");
    buttonChangePassword.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonChangePasswordActionPerformed(evt);
      }
    });

    textCurrentPassword.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        textCurrentPasswordKeyPressed(evt);
      }
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textCurrentPasswordKeyReleased(evt);
      }
    });

    textNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        textNewPasswordKeyPressed(evt);
      }
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textNewPasswordKeyReleased(evt);
      }
    });

    textConfirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        textConfirmPasswordKeyPressed(evt);
      }
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textConfirmPasswordKeyReleased(evt);
      }
    });

    labelCurrentPassword.setText("Current Password :");

    jLabel2.setText("New Password :");

    jLabel3.setText("Confirm New Password :");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(labelCurrentPassword)
              .addComponent(jLabel2)
              .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(textConfirmPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
              .addComponent(textNewPassword)
              .addComponent(textCurrentPassword)))
          .addGroup(layout.createSequentialGroup()
            .addGap(0, 132, Short.MAX_VALUE)
            .addComponent(buttonCancel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(buttonChangePassword)))
        .addGap(20, 20, 20))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(27, 27, 27)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(textCurrentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(labelCurrentPassword))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(textNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(textConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(buttonCancel)
          .addComponent(buttonChangePassword))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    dispose();
  }//GEN-LAST:event_buttonCancelActionPerformed

  private void buttonChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangePasswordActionPerformed
    onChangingPassword();
  }//GEN-LAST:event_buttonChangePasswordActionPerformed

  private void textCurrentPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textCurrentPasswordKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      onChangingPassword();
    }
  }//GEN-LAST:event_textCurrentPasswordKeyPressed

  private void textNewPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNewPasswordKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      onChangingPassword();
    }
  }//GEN-LAST:event_textNewPasswordKeyPressed

  private void textConfirmPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textConfirmPasswordKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      onChangingPassword();
    }
  }//GEN-LAST:event_textConfirmPasswordKeyPressed

  private void textCurrentPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textCurrentPasswordKeyReleased
    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
      textCurrentPassword.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    } else {
      textCurrentPassword.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }
  }//GEN-LAST:event_textCurrentPasswordKeyReleased

  private void textNewPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNewPasswordKeyReleased
    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
      textNewPassword.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    } else {
      textNewPassword.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }
  }//GEN-LAST:event_textNewPasswordKeyReleased

  private void textConfirmPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textConfirmPasswordKeyReleased
    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
      textConfirmPassword.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    } else {
      textConfirmPassword.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }
  }//GEN-LAST:event_textConfirmPasswordKeyReleased

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(changingPasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(changingPasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(changingPasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(changingPasswordDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        changingPasswordDialog dialog = new changingPasswordDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonCancel;
  private javax.swing.JButton buttonChangePassword;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel labelCurrentPassword;
  private javax.swing.JPasswordField textConfirmPassword;
  public static javax.swing.JPasswordField textCurrentPassword;
  private javax.swing.JPasswordField textNewPassword;
  // End of variables declaration//GEN-END:variables

  private void onChangingPassword() {
    try {
      if (String.valueOf(textCurrentPassword.getPassword()).equals(AESenc.decrypt(new Scanner(new File(System.getProperty("user.dir") + "\\Password")).useDelimiter("\\Z").next()))) { //comparing the typed current password with the one in the file
        
          if (String.valueOf(textNewPassword.getPassword()).equals(String.valueOf(textConfirmPassword.getPassword()))) { //comparing new password and confirm new password
            FileOutputStream fos = new FileOutputStream(System.getProperty("user.dir") + "\\Password", false);
            fos.write(AESenc.encrypt(String.valueOf(textNewPassword.getPassword())).getBytes());
            fos.close();
            JOptionPane.showMessageDialog(this, "Password has been successfully Changed");
            dispose();
          } else {
            JOptionPane.showMessageDialog(this, "The New Password and Confirm Password don't Match ! ");
          }
        
      } else {
        JOptionPane.showMessageDialog(this, "The Current Password is invalid !");
      }

    } catch (Exception ex) {
      
      try{
       FileOutputStream fos = new FileOutputStream(System.getProperty("user.dir") + "\\Password", false);
            fos.write(AESenc.encrypt(String.valueOf(textNewPassword.getPassword())).getBytes());
            fos.close();
            JOptionPane.showMessageDialog(this, "Password has been successfully Changed");
            dispose();
      }
      catch (Exception e){
        e.printStackTrace();
      }
      ex.printStackTrace();
    }
  }
}
