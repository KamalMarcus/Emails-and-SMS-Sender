/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EmailsSMS;

import com.sun.glass.events.KeyEvent;
import static EmailsSMS.EmailsAndSMSSender.connection;
import static EmailsSMS.EmailsAndSMSSender.rs;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import AESenc.AESenc;
import java.awt.ComponentOrientation;
import java.awt.im.InputContext;
import java.util.Collections;

/**
 *
 * @author Gamer
 */
public class ContactsList extends javax.swing.JFrame {

  public static DefaultListModel listModel = new DefaultListModel();
  public static boolean isCancelled = true;
  public static String email = "";
  public static String name;
  public static String phone = "";
  public static String birthDate;
  //these following variables are for Multiple selection of recepts
  public static boolean Multiple = false;//to check if the user selected multipel recepts or just one
  public static String selectedEmails;
  public static String selectedPhones;
  public static List contactsIDs = new ArrayList();

  static List<ContactListObject> ContactsObjects = new ArrayList<>();//A list of All contacts objects (used in the SEARCH function)
  public static String checkForBirthdaysNames = "";

  public static void checkForBirthdays() {
    PreparedStatement ps;
    String birthdates = "";

    Date d = new Date();

    SimpleDateFormat sdf = new SimpleDateFormat("MM-dd");
    String s = sdf.format(d);

    System.out.println(s);
    try {
      ps = EmailsAndSMSSender.connection.prepareStatement("SELECT BirthDate FROM ContactsList");
      rs = ps.executeQuery();
      while (rs.next()) {
        birthdates += rs.getString("BirthDate");

      }
      System.out.println(birthdates);
      if (birthdates.contains(s)) {
        new PopUpNotification().show();

      } else {
        System.out.println("no matching birth");
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

  }

  /**
   * Creates new form ContactsList
   */
  public ContactsList() {
    initComponents();
    setLocation(500, 5);
    setResizable(false);
//    setSize(400, 600);
    setTitle("Emails and SMS Sender");
    jList1.setModel(listModel);
    setFocusable(true);
    jList1.setCellRenderer(new ContactListRenderer());

    //Adding an action handler !
    jList1.addMouseListener(new MouseAdapter() {
      @Override
      public void mouseClicked(MouseEvent evt) {
        if (evt.getClickCount() == 1) {
          checkSelection.setSelected(false);
        } else if (evt.getClickCount() == 2) {
          onSend();
        }

      }

    });

    try {
      PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("select enableBirthday from settings");
      rs = ps.executeQuery();
      while (rs.next()) {
        if (rs.getString("enableBirthday").equals("true")) {
          checkForBirthdays();
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    LoadContactDetails();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonAdd = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    buttonDelete = new javax.swing.JButton();
    jButton1 = new javax.swing.JButton();
    buttonEdit = new javax.swing.JButton();
    checkSelection = new javax.swing.JCheckBox();
    textSearch = new javax.swing.JTextField();
    comboSort = new javax.swing.JComboBox();
    jLabel1 = new javax.swing.JLabel();
    buttonSettings = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    buttonAdd.setText("Add");
    buttonAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonAddActionPerformed(evt);
      }
    });

    jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    jList1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jList1.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jList1.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        jList1KeyPressed(evt);
      }
    });
    jScrollPane1.setViewportView(jList1);

    buttonDelete.setText("Delete");
    buttonDelete.setMaximumSize(null);
    buttonDelete.setMinimumSize(null);
    buttonDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonDeleteActionPerformed(evt);
      }
    });

    jButton1.setText("Send");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    buttonEdit.setText("Edit");
    buttonEdit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonEditActionPerformed(evt);
      }
    });

    checkSelection.setText("Select All");
    checkSelection.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkSelectionActionPerformed(evt);
      }
    });

    textSearch.setText("Search");
    textSearch.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        textSearchFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        textSearchFocusLost(evt);
      }
    });
    textSearch.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textSearchKeyReleased(evt);
      }
    });

    comboSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Date Modified", "Name" }));
    comboSort.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        comboSortActionPerformed(evt);
      }
    });

    jLabel1.setText("Sort by :");

    buttonSettings.setText("Settings");
    buttonSettings.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSettingsActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(buttonAdd)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonSettings)
        .addGap(30, 30, 30)
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(checkSelection)
        .addGap(16, 16, 16))
      .addComponent(textSearch)
      .addComponent(jScrollPane1)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(buttonAdd)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton1)
            .addComponent(checkSelection)
            .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel1)
            .addComponent(buttonSettings))
          .addComponent(buttonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
    onAdd();

  }//GEN-LAST:event_buttonAddActionPerformed

  private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
    onDelete();
  }//GEN-LAST:event_buttonDeleteActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    Multiple = false;
    //Sending to more than one contact
    List selectedValuesList = jList1.getSelectedValuesList();
    System.out.println(selectedValuesList.size());
    if (selectedValuesList.size() > 1) {
      Multiple = true;
      sendingToMultiple();
    } //Sending to only one contact
    else {
      onSend();
    }
  }//GEN-LAST:event_jButton1ActionPerformed

  private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
    onEdit();
  }//GEN-LAST:event_buttonEditActionPerformed

  private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      onSend();
    } else if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
      onDelete();
    }
  }//GEN-LAST:event_jList1KeyPressed

  private void checkSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSelectionActionPerformed
    if (checkSelection.isSelected()) {
      onSelectAll();
    } else {
      jList1.clearSelection();
    }
  }//GEN-LAST:event_checkSelectionActionPerformed

  private void textSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textSearchFocusGained
    if (textSearch.getText().equals("Search")) {
      textSearch.setText("");
    }

  }//GEN-LAST:event_textSearchFocusGained

  private void textSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textSearchFocusLost
    if (textSearch.getText().equals("")) {
      textSearch.setText("Search");
    }
  }//GEN-LAST:event_textSearchFocusLost

  private void comboSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSortActionPerformed

    List<ContactListObject> contacts = new ArrayList();
    try {
      if (comboSort.getSelectedIndex() == 0) {
        listModel.clear();
        LoadContactDetails();
      } else if (comboSort.getSelectedIndex() == 1) {
        listModel.clear();
        PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("select id,Name from ContactsList");
        rs = ps.executeQuery();
        while (rs.next()) {
          contacts.add(new ContactListObject(rs.getInt("id"), AESenc.decrypt(rs.getString("Name"))));
        }
        Collections.sort(contacts, new CustomComparator());
        for (ContactListObject contact : contacts) {
          listModel.addElement(contact);
        }

        //////Old Code (works if the data in DB are not encrypted)\\\\\\\
//        listModel.clear();
//        PreparedStatement ps = EmailSendingWorkaround.connection.prepareStatement("select id,Name from ContactsList order by Name");
//        rs = ps.executeQuery();
//        while (rs.next()) {
//          listModel.addElement(new ContactListObject(rs.getInt("id"), AESenc.decrypt(rs.getString("Name"))));
//        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }//GEN-LAST:event_comboSortActionPerformed

  private void buttonSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsActionPerformed
    SettingsDialog settingsDialog = new SettingsDialog(this, true);
    settingsDialog.setLocationRelativeTo(this);
    settingsDialog.setVisible(true);
  }//GEN-LAST:event_buttonSettingsActionPerformed

  private void textSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearchKeyReleased
    checkArabic();
    onSearch();
  }//GEN-LAST:event_textSearchKeyReleased

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(ContactsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(ContactsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(ContactsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(ContactsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new ContactsList().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonAdd;
  private javax.swing.JButton buttonDelete;
  private javax.swing.JButton buttonEdit;
  private javax.swing.JButton buttonSettings;
  private javax.swing.JCheckBox checkSelection;
  public static javax.swing.JComboBox comboSort;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  public static javax.swing.JList jList1;
  private javax.swing.JScrollPane jScrollPane1;
  private static javax.swing.JTextField textSearch;
  // End of variables declaration//GEN-END:variables

  public static void LoadContactDetails() {
    // clear all old data
    while (!listModel.isEmpty()) {
      listModel.clear();
    }
    // load all contcats data
    try {
      PreparedStatement ps = connection.prepareStatement("SELECT id, Name FROM ContactsList ORDER BY id");
      rs = ps.executeQuery();

      while (rs.next()) {
        ContactsList.listModel.addElement(new ContactListObject(rs.getInt("id"), AESenc.decrypt(rs.getString("Name"))));
        ContactsObjects.add(new ContactListObject(rs.getInt("id"), AESenc.decrypt(rs.getString("Name"))));
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void onDelete() {
    List selectedObjects = jList1.getSelectedValuesList();//getting values selected from list
    List<Object> ids = new ArrayList<Object>();

    for (Object value : selectedObjects) {
      ContactListObject o = (ContactListObject) value;
      ids.add(o.ID);

    }

    String selectedIds = ids.toString().replace("[", "(").replace("]", ")");

    int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete selected Contacts ?", "Confirm", JOptionPane.YES_NO_OPTION);
    if (option == JOptionPane.YES_OPTION) {

      try {
        PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("DELETE FROM ContactsList WHERE id in" + selectedIds);
        ps.executeUpdate();
      } catch (SQLException ex) {
        ex.printStackTrace();
      }

    }
    LoadContactDetails();

  }

  private void onAdd() {
    ContactDialog contactDialog = new ContactDialog(this, true);
    contactDialog.setLocationRelativeTo(this);
    contactDialog.setTitle("Add");
    contactDialog.setVisible(true);

    if (!isCancelled) {
      try {
        PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("INSERT INTO ContactsList "
                + "(Name,Email,BirthDate,phone) "
                + "VALUES (?,?,?,?)");

        ps.setString(1, AESenc.encrypt(ContactDialog.textName.getText()));
        ps.setString(2, AESenc.encrypt(ContactDialog.textEmail.getText()));
        ps.setString(3, ContactDialog.textBirthdate.getJFormattedTextField().getText());
        ps.setString(4, AESenc.encrypt(ContactDialog.textPhone.getText()));
        ps.executeUpdate();

        LoadContactDetails();

      } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error !", "Error !", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
      }
    }
  }

  private void onEdit() {
    if (jList1.getSelectedValuesList().size() != 1) {
      JOptionPane.showMessageDialog(this, "Please select only one user to be edited");
    } else {
      //get data from DB into dialog
      Object selectedObject = jList1.getSelectedValue();
      ContactListObject objectId = (ContactListObject) selectedObject;
      System.out.println(objectId.ID);
      try {
        PreparedStatement ps = connection.prepareStatement("SELECT* FROM ContactsList WHERE id=" + objectId.ID);
        rs = ps.executeQuery();

        while (rs.next()) {
          String name = AESenc.decrypt(rs.getString("Name"));
          String email = AESenc.decrypt(rs.getString("Email"));
          String phone = AESenc.decrypt(rs.getString("phone"));
          String birthDate = rs.getString("BirthDate");

          ContactDialog contactdialog = new ContactDialog(this, true);
          contactdialog.textName.setText(name);
          contactdialog.textEmail.setText(email);
          contactdialog.textPhone.setText(phone);
          contactdialog.textBirthdate.getJFormattedTextField().setText(birthDate);
          contactdialog.setLocationRelativeTo(this);
          contactdialog.setTitle("Edit");
          contactdialog.setVisible(true);

        }

      } catch (Exception ex) {
        ex.printStackTrace();

      }
      //updaing data
      if (!isCancelled) {
        try {
          PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("UPDATE ContactsList SET Name=?,Email=?,Phone=?,BirthDate=? WHERE id=" + objectId.ID);
          ps.setString(1, AESenc.encrypt(ContactDialog.textName.getText()));
          ps.setString(2, AESenc.encrypt(ContactDialog.textEmail.getText()));
          ps.setString(3, AESenc.encrypt(ContactDialog.textPhone.getText()));
          ps.setString(4, ContactDialog.textBirthdate.getJFormattedTextField().getText());

          ps.executeUpdate();

          LoadContactDetails();
        } catch (Exception e) {
          JOptionPane.showMessageDialog(this, "Error !", "Error !", JOptionPane.ERROR_MESSAGE);
        }

      }
    }

  }

  private void onSend() {
    //To check if there's at least one user has been chosen
    boolean check = false;
    /////

    try {
      ContactListObject selectedObject = (ContactListObject) jList1.getSelectedValue();
      PreparedStatement ps = connection.prepareStatement("SELECT * FROM ContactsList WHERE id=" + selectedObject.ID);
      rs = ps.executeQuery();

      while (rs.next()) {
        name = AESenc.decrypt(rs.getString("Name"));
        email = AESenc.decrypt(rs.getString("Email"));
        phone = AESenc.decrypt(rs.getString("Phone"));
        birthDate = rs.getString("BirthDate");
        //      System.out.println(email);
        check = true;
      }
    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Please Select at least one user !");
      check = false;
      e.printStackTrace();

    }

    new MainFrame().setVisible(check);
    MainFrame.textEmail.setText(email);
    MainFrame.labelName.setText(name);
    MainFrame.labelEmail.setText(email);
    MainFrame.labelPhone.setText(phone);
    MainFrame.labelBirthdate.setText(birthDate);
  }

  private void sendingToMultiple() {
    selectedEmails = "";
    selectedPhones = "";
    try {
      //getting the SQL String with the right syntax
      List selectedObjects = jList1.getSelectedValuesList();//getting values selected from list
      List<Object> ids = new ArrayList<Object>();

      for (Object value : selectedObjects) {
        ContactListObject o = (ContactListObject) value;
        ids.add(o.ID);
      }

      //////////OLD CODE (getting details by "name") (not recommended)\\\\\\\\
//      String names = namelist.toString();//converting the list to string
//      names = names.substring(0, names.length() - 1).substring(1);//eliminating the "[" and "]"
//      names = names.replace(" ", "");//eliminating non required spaces
//      String[] replace1 = names.split(",");//removing the ","
//      String fin = " Name='";//the final SQL statement string
//      for (String replace11 : replace1) {
//        fin = fin + replace11 + "' or Name='";
//      }
//      fin = fin.substring(0, fin.length() - 10);//removing the last non-necessary "or Name=" 
      //////
      //Getting Emails from DB
      PreparedStatement ps = connection.prepareStatement("SELECT Email, Phone FROM ContactsList WHERE id IN" + ids.toString().replace("[", "(").replace("]", ")"));
      rs = ps.executeQuery();

      while (rs.next()) {

        selectedEmails += ", " + AESenc.decrypt(rs.getString("Email"));
        selectedPhones += ", " + AESenc.decrypt(rs.getString("Phone"));

      }

      selectedEmails = selectedEmails.substring(2, selectedEmails.length());//removing the "null" part at the begining
      selectedPhones = selectedPhones.substring(2, selectedPhones.length());

      System.out.println("emails: " + selectedEmails);
      System.out.println("phones: " + selectedPhones);

    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Please Select at least one user !");

      e.printStackTrace();

    }

    MainFrame m = new MainFrame();
    m.setVisible(true);
    m.setSize(320, 380);
    MainFrame.jLabel5.setVisible(false);
    MainFrame.jLabel7.setVisible(false);
    MainFrame.jLabel1.setVisible(false);
    MainFrame.jLabel6.setVisible(false);
    MainFrame.labelEmail.setVisible(false);
    MainFrame.jLabel4.setVisible(false);
    MainFrame.jSeparator1.setVisible(false);

    MainFrame.textEmail.setText(selectedEmails);
    MainFrame.labelName.setVisible(false);
//    MainFrame.labelEmail.setText(email);
    MainFrame.labelPhone.setVisible(false);
    MainFrame.labelBirthdate.setVisible(false);
  }

  private void onSelectAll() {
    int size = listModel.getSize();
    int[] indices = new int[size];
    for (int i = 0; i < size; i++) {
      indices[i] = i;
    }
    jList1.setSelectedIndices(indices);
  }

  private void onSearch() {
    listModel.clear();
    for (ContactListObject contact : ContactsObjects) {
      if (contact.Label.contains(textSearch.getText())) {
        listModel.addElement(contact);
      }
    }
       ////Another (SEARCH) way by highlighting the resulting element\\\\\
//    for (int i = 0; i < listModel.getSize(); i++) {
//      ContactListObject obj = (ContactListObject) listModel.getElementAt(i);
//      String str = obj.Label;
//
//      if (str.startsWith(textSearch.getText())) {
//        jList1.setSelectedIndex(i);
//        jList1.ensureIndexIsVisible(i);
//        break;
//      }
//    }
//////////////////////////////////////////////////////////////////////////////////

    /////// Old Code (Works if the data in the DB are not encrypted)\\\\\\\\\\\
//    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
//      textSearch.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
//    } else {
//      textSearch.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
//    }
//    listModel.clear();
//    PreparedStatement ps;
//    try {
//      ps = connection.prepareStatement("SELECT Name,id FROM ContactsList WHERE Name LIKE '%" + AESenc.encrypt(textSearch.getText()) + "%'");
//      rs = ps.executeQuery();
//      while (rs.next()) {
//        listModel.addElement(new ContactListObject(rs.getInt("id"), AESenc.decrypt(rs.getString("name"))));
//      }
//    } catch (Exception ex) {
//      Logger.getLogger(ContactsList.class.getName()).log(Level.SEVERE, null, ex);
//    }
  }

  public static void checkArabic() {
    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
      textSearch.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    } else {
      textSearch.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }
  }
}
