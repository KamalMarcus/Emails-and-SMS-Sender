/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EmailsSMS;

import AESenc.AESenc;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.im.InputContext;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.swing.JOptionPane;
import static javax.xml.bind.DatatypeConverter.printBase64Binary;

/**
 *
 * @author Gamer
 */
public class MainFrame extends javax.swing.JFrame {

  public static String host;
  public static String port;

  public static boolean authentication;
  public static boolean startTls;

  public static String fromEmail; //requires valid gmail id
  public static String password; // correct password for gmail id
  public static String toEmail;

  public static String Key;
  public static String Secret;

  public static int emailOrSMS = 0;//Variable used in radio buttons indikates type of message (default type is email)

  int max = 160;
  int numOfSMS = 1;

  /**
   * Creates new form MainFrame
   */
  public MainFrame() {

    initComponents();
    setTitle("Sending Message");
    setLocationRelativeTo(null);
    setResizable(false);

    labelMax.setVisible(false);
    labelSlash.setVisible(false);
    labelNumOfSMS.setVisible(false);

    addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(java.awt.event.WindowEvent windowEvent) {
        onClose();
      }
    });

    LoadingSettingsFromDB();

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroupEmailOrSMS = new javax.swing.ButtonGroup();
    textEmail = new javax.swing.JTextField();
    buttonSend = new javax.swing.JButton();
    labelRecept = new javax.swing.JLabel();
    labelSubject = new javax.swing.JLabel();
    textSubject = new javax.swing.JTextField();
    labelBody = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    textBody = new javax.swing.JTextArea();
    jLabel4 = new javax.swing.JLabel();
    jSeparator1 = new javax.swing.JSeparator();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    labelName = new javax.swing.JLabel();
    labelEmail = new javax.swing.JLabel();
    labelPhone = new javax.swing.JLabel();
    radioEmail = new javax.swing.JRadioButton();
    radioSMS = new javax.swing.JRadioButton();
    labelSlash = new javax.swing.JLabel();
    labelMax = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    labelBirthdate = new javax.swing.JLabel();
    labelNumOfSMS = new javax.swing.JLabel();
    buttonClose = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

    textEmail.setEditable(false);

    buttonSend.setText("Send !");
    buttonSend.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSendActionPerformed(evt);
      }
    });

    labelRecept.setText("Recept's Email");

    labelSubject.setText("Subject");

    textSubject.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        textSubjectActionPerformed(evt);
      }
    });
    textSubject.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textSubjectKeyReleased(evt);
      }
    });

    labelBody.setText("Email-Body");

    textBody.setColumns(20);
    textBody.setLineWrap(true);
    textBody.setRows(5);
    textBody.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        textBodyKeyReleased(evt);
      }
    });
    jScrollPane1.setViewportView(textBody);

    jLabel4.setText("Contact Details : ");

    jLabel5.setText("Name : ");

    jLabel6.setText("E-mail :");

    jLabel7.setText("Phone :");

    labelName.setText("0");

    labelEmail.setText("0");

    labelPhone.setText("0");

    buttonGroupEmailOrSMS.add(radioEmail);
    radioEmail.setSelected(true);
    radioEmail.setText("E-mail");
    radioEmail.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        radioEmailActionPerformed(evt);
      }
    });

    buttonGroupEmailOrSMS.add(radioSMS);
    radioSMS.setText("SMS");
    radioSMS.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        radioSMSActionPerformed(evt);
      }
    });

    labelSlash.setText("/");

    labelMax.setText("160");

    jLabel1.setText("Birth Date :");

    labelBirthdate.setText("0");

    labelNumOfSMS.setText("(1)");

    buttonClose.setText("Close");
    buttonClose.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonCloseActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel4)
              .addComponent(labelSubject)
              .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(textEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                  .addComponent(labelMax)
                  .addGap(2, 2, 2)
                  .addComponent(labelSlash)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(labelNumOfSMS)
                  .addGap(126, 126, 126)
                  .addComponent(buttonClose)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(buttonSend))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(labelBody)))
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addComponent(jLabel5))
                      .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(2, 2, 2)))
                    .addGap(26, 26, 26)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(labelEmail)
                      .addComponent(labelPhone)
                      .addComponent(labelName)))
                  .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(labelBirthdate))))
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(labelRecept)
                .addGap(60, 60, 60)
                .addComponent(radioSMS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioEmail)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
      .addGroup(layout.createSequentialGroup()
        .addGap(72, 72, 72)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel4)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(labelName))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelEmail)
          .addComponent(jLabel6))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(labelPhone))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(labelBirthdate))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(9, 9, 9)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelRecept)
          .addComponent(radioEmail)
          .addComponent(radioSMS))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(textEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(9, 9, 9)
        .addComponent(labelSubject)
        .addGap(13, 13, 13)
        .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(labelBody)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelSlash)
          .addComponent(labelMax)
          .addComponent(labelNumOfSMS)
          .addComponent(buttonClose)
          .addComponent(buttonSend))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
   onSend();

  }//GEN-LAST:event_buttonSendActionPerformed

  private void radioSMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSMSActionPerformed
    emailOrSMS = 1;
    if (!ContactsList.Multiple) {
      textEmail.setText(ContactsList.phone);
    } else {
      textEmail.setText(ContactsList.selectedPhones);
    }
    labelRecept.setText("Recept's Phone");
    textSubject.setEnabled(false);
    labelBody.setText("Message");

    labelMax.setVisible(true);
    labelSlash.setVisible(true);
    labelNumOfSMS.setVisible(true);
  }//GEN-LAST:event_radioSMSActionPerformed

  private void radioEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioEmailActionPerformed
    emailOrSMS = 0;//means that we've chosen email radio button

    if (!ContactsList.Multiple) {
      textEmail.setText(ContactsList.email);
    } else {

      MainFrame.textEmail.setText(ContactsList.selectedEmails);

    }
    labelBody.setText("Email-Body");
    textSubject.setEnabled(true);
    labelRecept.setText("Recept's Email");
    labelMax.setVisible(false);
    labelSlash.setVisible(false);
    labelNumOfSMS.setVisible(false);
    
    
  }//GEN-LAST:event_radioEmailActionPerformed

  private void textSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSubjectActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_textSubjectActionPerformed

  private void textBodyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBodyKeyReleased
    onTyping();
  }//GEN-LAST:event_textBodyKeyReleased

  private void buttonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
    onClose();
  }//GEN-LAST:event_buttonCloseActionPerformed

  private void textSubjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSubjectKeyReleased
    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
      textSubject.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    } else {
      textSubject.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }
  }//GEN-LAST:event_textSubjectKeyReleased

  /**
   * @param args the command line arguments
   */
  public void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new MainFrame().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonClose;
  public static javax.swing.ButtonGroup buttonGroupEmailOrSMS;
  private javax.swing.JButton buttonSend;
  public static javax.swing.JLabel jLabel1;
  public static javax.swing.JLabel jLabel4;
  public static javax.swing.JLabel jLabel5;
  public static javax.swing.JLabel jLabel6;
  public static javax.swing.JLabel jLabel7;
  private javax.swing.JScrollPane jScrollPane1;
  public static javax.swing.JSeparator jSeparator1;
  public static javax.swing.JLabel labelBirthdate;
  private javax.swing.JLabel labelBody;
  public static javax.swing.JLabel labelEmail;
  private javax.swing.JLabel labelMax;
  public static javax.swing.JLabel labelName;
  public static javax.swing.JLabel labelNumOfSMS;
  public static javax.swing.JLabel labelPhone;
  private javax.swing.JLabel labelRecept;
  private javax.swing.JLabel labelSlash;
  private javax.swing.JLabel labelSubject;
  public static javax.swing.JRadioButton radioEmail;
  public static javax.swing.JRadioButton radioSMS;
  public static javax.swing.JTextArea textBody;
  public static javax.swing.JTextField textEmail;
  private static javax.swing.JTextField textSubject;
  // End of variables declaration//GEN-END:variables

  private void onSndingEmail() {
    toEmail = textEmail.getText(); // can be any email id
    System.out.println("TLSEmail Start");
//    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    Properties props = new Properties();
    props.put("mail.smtp.host", host); //SMTP Host
    props.put("mail.smtp.port", port); //TLS Port
    props.put("mail.smtp.auth", "" + authentication); //enable authentication
    props.put("mail.smtp.starttls.enable", "" + startTls); //enable STARTTLS

    //create Authenticator object to pass in Session.getInstance argument
    Authenticator auth = new Authenticator() {
      //override the getPasswordAuthentication method
      protected PasswordAuthentication getPasswordAuthentication() {
        return new PasswordAuthentication(fromEmail, password);
      }
    };
    Session session = Session.getInstance(props, auth);

    EmailUtil.sendEmail(session, MainFrame.toEmail, textSubject.getText(), textBody.getText());
//    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  }

  private void onSendingSMS() {
    //To know the cridets : http://apis.sendlysms.com/?api=getcredit&key=02ca10ac-82b7-4a1a-9788-3cfd12&secret=b852b75e-1d99-4f3d-964d-9674fac9f3c3
    String phoneNumber = textEmail.getText().replace(" ", "");
    String msg = textBody.getText();
//    msg = msg.replace(" ", "%20");
//    converting to Base64 for arabic typing
    String res = printBase64Binary(msg.getBytes());
    System.out.println(res);
    try {
      URL urldemo = new URL("http://apis.sendlysms.com/?api=sendsms&key=" + Key + "&secret=" + Secret + "&to=" + phoneNumber + "&msg=" + res + "&sendafter=0");
      URLConnection yc = urldemo.openConnection();
      BufferedReader in = new BufferedReader(new InputStreamReader(
              yc.getInputStream()));
      String inputLine;
      while ((inputLine = in.readLine()) != null) {
        System.out.println(inputLine);
        JOptionPane.showMessageDialog(this, "Message has been sent successfully");
      }
      in.close();
    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Message has not been sent");
      System.out.println(e);
    }

  }

  private void onTyping() {
    if (InputContext.getInstance().getLocale().toString().startsWith("ar")) {
      max = numOfSMS * 64 - textBody.getText().length();
      if (max < 0) {
        max = 64;
        numOfSMS++;
      } else if (max > 63) {
        numOfSMS--;
      }
      textBody.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    } else {
      max = numOfSMS * 160 - textBody.getText().length();
      if (max < 0) {
        max = 160;
        numOfSMS++;
      } else if (max > 159) {
        numOfSMS--;
      }
      textBody.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    }

    labelMax.setText("" + max);
    labelNumOfSMS.setText("(" + numOfSMS + ")");
  }

  private void onClose() {
    ContactsList.Multiple = false;
    this.dispose();
  }

  private void LoadingSettingsFromDB() {
    try {
      PreparedStatement ps = EmailsAndSMSSender.connection.prepareStatement("select * from Settings");
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        host = (AESenc.decrypt(rs.getString("host")));
        port = (AESenc.decrypt(rs.getString("port")));
        if (AESenc.decrypt(rs.getString("authentication")).equals("true")) {

          authentication = true;

        } else if (AESenc.decrypt(rs.getString("authentication")).equals("false")) {
          authentication = false;
        }
        if (AESenc.decrypt(rs.getString("STATTLS")).equals("true")) {
          startTls = true;
        } else if (AESenc.decrypt(rs.getString("STATTLS")).equals("false")) {
          startTls = false;
        }
        fromEmail = (AESenc.decrypt(rs.getString("user")));
        password = (AESenc.decrypt(rs.getString("password")));

        Key = (AESenc.decrypt(rs.getString("key")));
        Secret = (AESenc.decrypt(rs.getString("secret")));
       
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  public void onSend() {
    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
     if (emailOrSMS == 0) {
      onSndingEmail();
    } else if (emailOrSMS == 1) {
      if (numOfSMS > 1) {
        int x = JOptionPane.showConfirmDialog(this, "Warning ! The Message will be sent in " + numOfSMS + " Messages not one ! Do you want to continue ?");
        System.out.println(x);
        if (x == 0) {
          onSendingSMS();
        }
      } else {
        onSendingSMS();
      }

    }
     setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  }
}
